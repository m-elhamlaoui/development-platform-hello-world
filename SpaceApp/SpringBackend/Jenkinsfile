def DIRECTORIES = [
    'GateawayService','ConfigService','DiscoveryService',
    'HealthMonitoringService','FetchingData','EndOfLifeService','CollisionService','UserService'
]
def SERVICES = [
    'gateway-service', 'config-service', 'discovery-service',
    'health-monitoring-service', 'fetching-data-service', 'end-of-life-service',
    'collision-service','user-service'
]

pipeline {
    agent any

    environment {
        LOCAL_REGISTRY = 'localhost:32000'  // MicroK8s default
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Build JARs') {
            steps {
                script {
                    for (int i = 0; i < SERVICES.size(); i++) {
                        def dirName = DIRECTORIES[i]
                        echo "Building JAR in directory ${dirName}..."
                        dir("SpaceApp/SpringBackend/${dirName}") {
                            echo "DEBUG : Listing files in ${dirName}"
                            sh 'ls -l'
                            sh 'mvn clean package -DskipTests'
                        }
                    }
                }
            }
        }

        stage('Build Images with Buildah') {
            steps {
                script {
                    for (int i = 0; i < SERVICES.size(); i++) {
                        def svc = SERVICES[i]
                        def dirName = DIRECTORIES[i]
                        def image = "${env.LOCAL_REGISTRY}/${svc}:latest"
                        echo "Building OCI image for ${svc} from directory ${dirName}..."
                        dir("SpaceApp/SpringBackend/${dirName}") {
                            echo "DEBUG : Listing files in ${dirName}"
                            sh 'ls -l target/'
                            // Build OCI image using buildah
                            sh "buildah bud -t ${image} ."
                        }
                    }
                }
            }
        }

        stage('Deploy to MicroK8s') {
            steps {
                echo "Deploying Spring Boot apps to MicroK8s..."
                sh "microk8s kubectl apply -f SpaceApp/SpringBackend/spring-app-deployment.yaml"
                sh "microk8s kubectl apply -f SpaceApp/SpringBackend/spring-app-service.yaml"
            }
        }
    }

    post {
        success {
            echo '✅ Spring Boot app deployed successfully to MicroK8s.'
        }
        failure {
            echo '❌ Deployment failed.'
        }
    }
}
